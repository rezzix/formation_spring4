Ajouter les dépedances maven:
=============================
spring-batch-core (3.0.5.RELEASE)
spring-oxm 


Configuration du job launcher :
===============================

	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>
	
	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />
		<property name="databaseType" value="H2" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />
	
Configuration du batch dans un fichier séparé :
===============================================

<import resource="jobs-config.xml"/>

Configurer sur le nouveau fichier :
====================================
 - Le record, Un enregistrement représenté par un simple bean Transaction (transaction commerciale)
 - Le item Reader
      <bean id="itemReader"  class="org.springframework.batch.item.file.FlatFileItemReader">
        <property name="resource" value="chemin_vers_fichier/records.csv" />
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="names" value="username,userid,transactiondate,amount" />
                    </bean>
                </property>
                <property name="fieldSetMapper">
                    <bean class="com.formation.spring.batch.RecordFieldSetMapper" />
                </property>
            </bean>
        </property>
    </bean>

 
 - le item processor
     <bean id="itemProcessor" class="com.formation.spring.batch.CustomItemProcessor" />

 - Le writer (avec son marshaller xml)
     <bean id="itemWriter"
      class="org.springframework.batch.item.xml.StaxEventItemWriter">
        <property name="resource" value="file:xml/output.xml" />
        <property name="marshaller" ref="recordMarshaller" />
        <property name="rootTagName" value="transactionRecord" />
    </bean>
    <bean id="recordMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="classesToBeBound">
            <list>
                <value>com.formation.spring.batch.Transaction</value>
            </list>
        </property>
    </bean>
 
 - Rassembler le tout dans une définition du job et de son unique étape :
     <batch:job id="firstBatchJob">
        <batch:step id="step1">
            <batch:tasklet>
                <batch:chunk reader="itemReader" writer="itemWriter"
                  processor="itemProcessor" commit-interval="10">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>
    
Implémenter les classes java correspondantes :
=============================================
Dans le CustomItemProcessor masquer les noms des clients ayant des transactions > 10000


Utiliser un fichier CSV en entrée :
===================================

Lancer à partir d'une classe main :
===================================
public static void main( String[] args )
    {
    	ApplicationContext context = new ClassPathXmlApplicationContext("application-context.xml");
    	
    	JobLauncher jobLauncher = (JobLauncher) context.getBean("jobLauncher");
        Job job = (Job) context.getBean("firstBatchJob");
        System.out.println("Starting the batch job");
        try {        	
        	JobParameters jobParameters = new JobParametersBuilder().addDate("launch_time",new Date()).toJobParameters();
        	JobExecution execution = jobLauncher.run(job, jobParameters);
            
            System.out.println("Job Status : " + execution.getStatus());
            System.out.println("Job completed");
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Job failed");
        }
    }
 
